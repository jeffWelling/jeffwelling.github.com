<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>My Musings</title>
 <link href="http://.github.com/Blog/atom.xml" rel="self"/>
 <link href="http://.github.com/Blog/"/>
 <updated>2009-12-12T12:42:35-08:00</updated>
 <id>http://.github.com/Blog/</id>
 <author>
   <name>Dr Nic Williams</name>
   <email>williams@gmail.com</email>
 </author>

 
 <entry>
   <title>Facebook, What The Fuck?</title>
   <link href="http://.github.com/Blog/2009/12/12/Social-Networking-Me.html"/>
   <updated>2009-12-12T00:00:00-08:00</updated>
   <id>http://.github.com/Blog/2009/12/12/Social-Networking-Me</id>
   <content type="html">&lt;p&gt;Alright, so I bit the bullet and did the Myspace and Facebook thing.&lt;br /&gt;
You can find me on Myspace at http://www.myspace.com/512643590&lt;/p&gt;
&lt;p&gt;You can find me on Facebook at http://www.facebook.com/profile.php?ref=name&amp;amp;id=100000562880858&lt;/p&gt;
&lt;p&gt;There.  Now you internet people can find me, see me, message me, touch yourselves at night while thinking about me, whatever you like.  Play safe :)&lt;/p&gt;
&lt;p&gt;The best way to get in touch with me is still via Email, Phone, and Text, in that order.&lt;/p&gt;
&lt;p&gt;Jeff (dot) Welling (at) Gmail (dot) com&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why is Myspace so slow?</title>
   <link href="http://.github.com/Blog/2009/12/12/Myspace-is-SO-SLOW.html"/>
   <updated>2009-12-12T00:00:00-08:00</updated>
   <id>http://.github.com/Blog/2009/12/12/Myspace-is-SO-SLOW</id>
   <content type="html">&lt;p&gt;Yes, that is a rhetorical question.  I know why.&lt;br /&gt;
The question isn&amp;#8217;t so much why, it&amp;#8217;s more how the hell do so many people sit on MySpace and Facebook when their sites are slow as shit?&lt;/p&gt;
&lt;p&gt;Seriously, taking a couple seconds to load &lt;em&gt;each page&lt;/em&gt;?  What is this, the days of dialup?&lt;br /&gt;
Drop some of the flash and javascript bullshit you&amp;#8217;ve over-laiden your site with, and maybe it would run faster.&lt;/p&gt;
&lt;p&gt;Disgusting.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>My IM name on Myspace</title>
   <link href="http://.github.com/Blog/2009/12/12/Myspace-IM-name.html"/>
   <updated>2009-12-12T00:00:00-08:00</updated>
   <id>http://.github.com/Blog/2009/12/12/Myspace-IM-name</id>
   <content type="html">&lt;p&gt;If you&amp;#8217;ve ever spent time talking to my on Myspace&amp;#8217;s IM client, you may be wondering why my IM name is &amp;#8220;24c55ff09e08ac35c6993bdcb88a75b7479568b0&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Well, let me explain.&lt;/p&gt;
&lt;p&gt;Myspace is fucking retarded, from top to bottom.  I don&amp;#8217;t mean the site itself, or the idea of social networking, I mean the inept fucking retards running the whole thing.  Case in point;&lt;br /&gt;
Myspace IM requires that your &amp;#8216;name&amp;#8217; be unique, and not be the same as any other user.  Why? Who fucking knows. Let me tell you how its &lt;span class=&quot;caps&quot;&gt;SUPPOSED&lt;/span&gt; to be done.&lt;br /&gt;
You see, the proper way to do it, is to allow any user to use any username they wish.  This is done by combining the &lt;span class=&quot;caps&quot;&gt;ALREADY&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;UNIQUE&lt;/span&gt; email address that was used during the signup process, with whichever IM username the user wants.  Using this method, the user has any username they want in their IM client from their full name, &amp;#8220;Jeff Welling&amp;#8221; in my case, to &amp;#8220;That creepy pastor at your church&amp;#8221; and because its multiplexed on your email address, it is still unique when compared against any other user and email address.&lt;/p&gt;
&lt;p&gt;But, instead, they do it the half-assed way where everyone shares one big namespace, meaning that if someone has already taken the MySpace IM name you want to use, like your actual fucking name, tough.  This is what happens when you have retards sitting in a room with retards in suits, trying to design something they think will be successfull.&lt;/p&gt;
&lt;p&gt;&amp;#8220;Oh well if we have an instant messaging service, people will love us, and fuck functionality and namespace collisions.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Asshats with a cocain addiction, I tell you what.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Facebook, What The Fuck?</title>
   <link href="http://.github.com/Blog/2009/12/12/Facebook-What-the-fuck.html"/>
   <updated>2009-12-12T00:00:00-08:00</updated>
   <id>http://.github.com/Blog/2009/12/12/Facebook-What-the-fuck</id>
   <content type="html">&lt;p&gt;I don&amp;#8217;t know if it was intentional or not, but breaking &lt;span class=&quot;caps&quot;&gt;ABSOLUTELY&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;BASIC&lt;/span&gt; functionality of being able to tab between fields on your forms is the one of the most shortsighted things you could have done.&lt;/p&gt;
&lt;p&gt;Tabbing between fields in a form is the easiest way of getting between them, and you fucking broke it.  Congratulations.&lt;/p&gt;
&lt;p&gt;Now, instead, you have to type in what you were going to type in, and instead of hitting tab (&amp;#8217;Cause if you do hit tab, it obliterates everything you typed in that field) you have to use the mouse which is infinitely slower.&lt;/p&gt;
&lt;p&gt;See, little reasons like this are why I fucking hate sites like Facebook and Myspace.  They were designed by, are operated and maintained by, completely inept fucking clueless 13 year old girls who think the next shiny thing has to be implemented or they might fall behind.&lt;/p&gt;
&lt;p&gt;How about a site that loaded instantly, was clean from as much Java and Flash cruft as possible, and was actually simple and easy to use?  The fuck man..  Simple clean interfaces are infinitely better than complicated intricate java and flash ridden sluggish excuses for sites that you guys maintain.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Apple's Snow Leopard, ssh, and dns</title>
   <link href="http://.github.com/Blog/2009/10/17/snow-leopard-ssh-and-dns.html"/>
   <updated>2009-10-17T00:00:00-07:00</updated>
   <id>http://.github.com/Blog/2009/10/17/snow-leopard-ssh-and-dns</id>
   <content type="html">&lt;p&gt;I use ssh extremely frequently, I think many *nix users with multiple machines to care for do.  If it doesn&amp;#8217;t come installed, or isn&amp;#8217;t installable with apt/synaptic or your system&amp;#8217;s package management tools, you should consider getting a real operating system.&lt;/p&gt;
&lt;p&gt;I have my internal name service set up somewhat unusually, to me at least.  Instead of having it setup as &amp;#8216;Computer1.network.com&amp;#8217; or whatever, because I don&amp;#8217;t have or intend to get a real registered name I just set it up as &amp;#8216;Computer1.network&amp;#8217;, and so far it&amp;#8217;s work fantastically.  I only mention this because its a little bit of an unusual(/non-standard?) setup and so could be contributing to the problem.&lt;/p&gt;
&lt;p&gt;In Leopard, this wasn&amp;#8217;t a problem at all, but as soon as I upgraded to Snow Leopard I was left with this big, ugly, nasty bug glaring me in the face.  The bug is obvious just in the output of what I was trying to do;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user$ ssh foo&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ssh: Could not resolve hostname foo: nodename nor servname provided, or not known&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;user$ nslookup foo&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Server:         192.168.1.20&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Address:        192.168.1.20#53&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Name:   foo.Network&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;Address: 192.168.1.20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user$ ssh foo.network&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;ssh: Could not resolve hostname foo.network: nodename nor servname provided, or not known&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;user$ ssh 192.168.1.20&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;user(at)192.168.1.20's password:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The problem is clear as day, ssh apparently cannot resolve the names that exist in my name server, but using the IP address works.  Whats particularly strange, is that its intermittent.  It will work say, freshly after a reboot, but later on in the day after a couple hours have passed, it stops working. o.0&lt;br /&gt;
What exactly Apple changed I have no idea, but evidently in the process they&amp;#8217;ve pissed all over ssh&amp;#8217;s ability to do name lookups properly.  Yes, it could have something to do with my slightly unusual naming convention but I think the fact that it worked sans Snow Leopard, and then after installation suddenly stops is a pretty good indication that they broke something.&lt;/p&gt;
&lt;p&gt;Hopefully, they get around to fixing it soon, cause while I could easily just create alias entries in my .bashrc file for 1 or 2 or even a bunch of IPs, that can&amp;#8217;t be done dynamically and many of the hosts on my network are dynamic.  If this isn&amp;#8217;t fixed soon I&amp;#8217;ll just have to switch back to Leopard, I haven&amp;#8217;t noticed many other enticing features that I&amp;#8217;d miss.  Even the much hyped Grand Central seems mildly over-rated, granted I haven&amp;#8217;t done benchmarking or intensive &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; tasks to compare against but anyone toting &amp;#8220;Grand Central is going to double or even triple the speed of the interface!&amp;#8221;, yeah&amp;#8230; no.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby's splat operator</title>
   <link href="http://.github.com/Blog/2009/10/13/rubys-splat-operator.html"/>
   <updated>2009-10-13T00:00:00-07:00</updated>
   <id>http://.github.com/Blog/2009/10/13/rubys-splat-operator</id>
   <content type="html">&lt;p&gt;So I&amp;#8217;ve begun maintaining a fork of &lt;a href=&quot;http://wiki.github.com/schacon/ticgit&quot;&gt;Ticgit&lt;/a&gt; and I was reading the source code the other day for fun and I came across an expression that I&amp;#8217;d never seen before in ruby code.  The section that I came across was&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commit_log   = `git log -1`.chomp&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;m, commit_id = * commit_log.match(/commit\W*([A-Fa-f0-9]+)/)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And the part specifically that confused me, was the &lt;em&gt;= *&lt;/em&gt; part.  I&amp;#8217;d never seen an asterisk used right after an equals sign like that, it completely caught me off guard; Off to the #ruby &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt; channel I was! It turns out, that &lt;em&gt;*&lt;/em&gt; is called the &lt;strong&gt;splat operator&lt;/strong&gt; in ruby. After a couple minutes asking around and some playtime in irb, I worked out what it did.  In the situation it was used in in ticgit, the result of &lt;strong&gt;commit_log.match(/&amp;#8230;/)&lt;/strong&gt; was&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&quot;commit 159f9b343e84a1ac4eee716194b2c3ae3769cb7f&quot;, &quot;159f9b343e84a1ac4eee716194b2c3ae3769cb7f&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And what was happening was the splat operator was saying, put the fist element in the variable &lt;strong&gt;m&lt;/strong&gt;, and put &lt;em&gt;any remaining variables&lt;/em&gt; in an array in the variable &lt;strong&gt;commit_id&lt;/strong&gt;.  The idea behind the splat operator is that if there had been three variables before the &lt;em&gt;= *&lt;/em&gt; part, and four parts of the string matched by .match(), then it would have put the first element in the first variable, the second element in the second variable, and both remaining elements as a 2 element array in the third variable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://theplana.wordpress.com/2007/03/03/ruby-idioms-the-splat-operator/&quot;&gt;Heres&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/questions/776462/where-is-it-legal-to-use-ruby-splat-operator&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;http://chinnakarupan.wordpress.com/2008/03/18/splat-operator-in-ruby/&quot;&gt;couple&lt;/a&gt; &lt;a href=&quot;http://neeraj.name/blog/articles/278-splat-in-ruby&quot;&gt;other&lt;/a&gt; links to help you understand the splat operator if you don&amp;#8217;t already. Playing with it in irb helped me figure out enough of what it did to keep reading the code.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blogging with Github Pages, Jekyll, and Disqus.</title>
   <link href="http://.github.com/Blog/2009/10/13/github-pages%2Cjekyll%2Cdisqus.html"/>
   <updated>2009-10-13T00:00:00-07:00</updated>
   <id>http://.github.com/Blog/2009/10/13/github-pages,jekyll,disqus</id>
   <content type="html">&lt;p&gt;Just the other day, I decided to setup blogging on my Github Pages page, &lt;a href=&quot;jeffwelling.github.com&quot;&gt;jeffwelling.github.com&lt;/a&gt; .  It took me longer than I feel was really necessary to get going and one of the most frustrating things, despite the copious amount of docs out there already, was that I really couldn&amp;#8217;t find much information on how to &lt;em&gt;use&lt;/em&gt; jekyll (aside from how to use it to host the blog from jekyll itself).&lt;br /&gt;
Some really good material to &lt;a href=&quot;http://drnicwilliams.com/2008/12/21/migrating-project-websites-to-github-pages-with-sake-tasks-new-websites-with-jekyll_generator/&quot;&gt;help get you oriented&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are many pages and docs out there but few, if any of them were aimed at someone who wasn&amp;#8217;t only new to jekyll but who was kind of new to blogging too; I wasn&amp;#8217;t aware of any blogger terminology or best practices or even common practices.  This blog post is intended to help people in the situation that I was in, you want to start blogging with Github Pages, Jekyll and Disqus for comments but you don&amp;#8217;t know what to do or how to approach this, or you read the jekyll documentation and were still left feeling a bit mystified on how to use the thing.&lt;/p&gt;
&lt;p&gt;First and foremost, you will need an account on Github.com which is where your blog will be hosted.  Your jekyll blog doesn&amp;#8217;t have to be located on Github, but it is the method chosen to be covered in this blog.  For information on hosting it elsewhere, realize that the _sites folder is all you need to copy to your web server, and just Google for jekyll documentation.&lt;br /&gt;
The &lt;a href=&quot;http://github.com/plans&quot;&gt;Github Signup&lt;/a&gt; page has several plans, but I just chose the free one for now.  If your blog gains a lot of traffic you aught to consider upgrading to a pay account, even if for no other reason than to help support the people who are hosting your blog.&lt;/p&gt;
&lt;p&gt;Now that we have a Github account, we can create a repository that will host our blog.&lt;br /&gt;
One of the neat features about Github is that if you create a repository called &lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt;.github.com where &lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt; is your Github username, then it will be published as a Github Pages website at &lt;a href=&quot;http://jeffwelling.github.com/&quot;&gt;http://&lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt;.github.com/&lt;/a&gt; .  My Github username is jeffwelling, following that link will take you to my main blog page and you can see in the address bar what I mean.&lt;br /&gt;
For more information on how you can work with Github Pages and create project specific blogs etc using the gh-pages branch in your project&amp;#8217;s repo, see &lt;a href=&quot;http://github.com/blog/272-github-pages&quot;&gt;this&lt;/a&gt; and more importantly, &lt;a href=&quot;http://pages.github.com/&quot;&gt;this&lt;/a&gt; .  I won&amp;#8217;t be covering it in this blog post.&lt;/p&gt;
&lt;p&gt;Now, we have our Github Pages page setup for our user at &lt;span class=&quot;caps&quot;&gt;NAME&lt;/span&gt;.github.com .  The next step is to install jekyll and start blogging.&lt;/p&gt;
&lt;p&gt;There is a Ruby Gem called &lt;strong&gt;jekyll_generator&lt;/strong&gt; which will help you create an empty blog directory.&lt;br /&gt;
I wanted to create and store my blog in my ~/Documents/Blog directory, so I did&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd ~/Documents&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ /var/lib/gems/1.8/bin/jekyll_generator Blog --title &quot;My Musings&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I had to call it by the full path for some reason, &amp;#8216;Blog&amp;#8217; is the directory that it will create and put the new empty templates and stuff in, and &amp;#8220;My Musings&amp;#8221; is the title of my blog in case you hadn&amp;#8217;t noticed you insensitive clod!&lt;/p&gt;
&lt;p&gt;At this point, you may want to run&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ git add .&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ git commit -a -m &quot;Initial commit&quot;&lt;/code&gt;&lt;br /&gt;
Just so that you can return to this clean state if you accidentally muck something up.&lt;/p&gt;
&lt;p&gt;This is where I started to get confused though.  I had an empty blog directory, but how did I create a post?&lt;br /&gt;
The answer is easy, you just start writing a textfile.  If you want it to look pretty, check out &lt;a href=&quot;http://textile.thresholdstate.com/&quot;&gt;Textile&lt;/a&gt; and &lt;a href=&quot;http://daringfireball.net/projects/markdown/basics&quot;&gt;Markup&lt;/a&gt; .  Also, remember, if your going to use Textile or Markdown make sure you save it with the appropriate extension, .textile and .markdown .  Where you save the file, and what you name it is the critical part here in making it a blog post.&lt;/p&gt;
&lt;p&gt;When your posting, your post &lt;strong&gt;must&lt;/strong&gt; be saved into the ~/Documents/Blog/_posts directory, and it &lt;strong&gt;must&lt;/strong&gt; have the name format of &lt;strong&gt;year-month-day-the-title-of-the-post.format&lt;/strong&gt; .  By saving the text file in the _posts directory, with that specific format of name, and then running the jekyll command from the ~/Documents/Blog directory, you will create your blog post.&lt;/p&gt;
&lt;p&gt;If the name format still confuses you, take a look at &lt;a href=&quot;http://github.com/jeffWelling/jeffwelling.github.com/tree/master/_posts/&quot;&gt;my _posts&lt;/a&gt; directory.  Currently there are only a handful of posts, but they were all created on October 13th 2009, and so all three of them begin with &amp;#8220;2009-10-13&amp;#8221; and they all end with either &amp;#8220;.textile&amp;#8221; or &amp;#8220;.markdown&amp;#8221; to indicate which markup to use.  The actual &lt;em&gt;title&lt;/em&gt; of the post itself, is stored at the top of the file in a section that looks like this;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;---&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;layout: post&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;title: Ruby's splat operator&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;---&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In this case, the title of the blog post is &amp;#8220;Ruby&amp;#8217;s splat operator&amp;#8221;.  To be honest I&amp;#8217;m not sure if there is a direct relationship between what you put in the filename as your title and what you specify in that short blip at the beginning of the post as your title, if anyone knows what the connection is please comment on it.&lt;/p&gt;
&lt;p&gt;If you haven&amp;#8217;t already done so, you need to initialize your .git repository, and add everything under ~/Documents/Blog/ to it (as per our example above, if you use a different directory then obviously change it to accommodate).&lt;/p&gt;
&lt;p&gt;Now, if you haven&amp;#8217;t already done so, you need to setup your git repository so that you can push to Github to publish your blog on Github Pages by adding an &amp;#8216;origin&amp;#8217; reference which points to Github.  This is outlined on the Github page when you first create your repository.  For example, for me and my blog, the commands were&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$ git remote add origin \ git@github.com:jeffWelling/jeffWelling.github.com.git&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;$  git push origin master&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But you will need to change the user name from jeffWelling to your user name if your going to copy/paste that command.&lt;/p&gt;
&lt;p&gt;Now, you should have a blog hosted on Github Pages using jekyll.  In order to get Disqus comments on your blog, keep reading.  Otherwise you can stop here and be content with your comment-less blog.&lt;/p&gt;
&lt;p&gt;Using Disqus comments on your blog is as easy as creating a Disqus account, pointing it at your blog, and adding a couple lines of source to your default layout files in the &amp;#8220;~/Documents/Blog/_layouts&amp;#8221; directory.  I would copy and paste the lines for Disqus but the lines that they give you to copy are customized per your blog so it will just be easier to tell you to copy and paste what they give you instead.  Note that unfortunately jekyll_generator tries to be friendly and generate the necessary Disqus code for you, but it doesn&amp;#8217;t seem to do it correctly.  I had to manually remove all of the Disqus code, and replace it with the code that I copied dierctly from the Disqus Install Instructions Universal Code section.  If you used jekyll_generator you may have to do the same.&lt;/p&gt;
&lt;p&gt;That should be it, now after running jekyll, commiting and pushing your changes to Github, you should have a wonderful new blog, optionally complete with comments as well!&lt;/p&gt;
&lt;p&gt;How do you create a new post with jekyll? &lt;br /&gt;
Create a new file in the _posts directory with the appropriate date and title information in the name as specified above.  Fill it in with your blog text, and accompanying markup if you like.  Then, run jekyll in the top level blog directory, in my case ~/Documents/Blog .  This will update all the necessary files in _site .  Now, you can do a &lt;br /&gt;
&lt;code&gt;$ git add&lt;/code&gt; &lt;br /&gt;
to add any new files/posts, &lt;br /&gt;
&lt;code&gt;$ git commit&lt;/code&gt;&lt;br /&gt;
to commit your changes, and finally &lt;br /&gt;
&lt;code&gt;$ git push origin&lt;/code&gt; &lt;br /&gt;
to push your changes to the server and publish them.&lt;/p&gt;
&lt;p&gt;Now, if you&amp;#8217;ve followed the instructions in this blog, you should have a working Github hosted, jekyll generated, Disqus enabled, git revisioned blog.&lt;/p&gt;
&lt;p&gt;Questions?  Suggestions?  Did I miss something?  Did it not work for you?&lt;br /&gt;
Leave a comment and let me know!&lt;br /&gt;
Cheers.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Welcome to 'My Musings'</title>
   <link href="http://.github.com/Blog/2009/10/13/first-post.html"/>
   <updated>2009-10-13T00:00:00-07:00</updated>
   <id>http://.github.com/Blog/2009/10/13/first-post</id>
   <content type="html">&lt;p&gt;My Musings is going to be an awesome blog of awesomeness and doom. BRAINWORMS!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Second post ever</title>
   <link href="http://.github.com/Blog/2009/10/13/cool.html"/>
   <updated>2009-10-13T00:00:00-07:00</updated>
   <id>http://.github.com/Blog/2009/10/13/cool</id>
   <content type="html">&lt;p&gt;Neat, my second blog post ever. Loving the Disqus comments, even if they haven&amp;#8217;t really been used yet. Still kind of testing things out.&lt;/p&gt;</content>
 </entry>
 
 
</feed>